"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"I don't know c language",tags:["c"],categories:["computer science"],date:new Date("2016-04-21T21:12:00.000Z")},o=void 0,l={permalink:"/archives/I-don-t-know-c-language",editUrl:"https://github.com/banananappletw/blog/edit/master/blog/archives/archives/I-don-t-know-c-language.md",source:"@site/archives/I-don-t-know-c-language.md",title:"I don't know c language",description:"allocate string by array or pointer",date:"2016-04-21T21:12:00.000Z",formattedDate:"April 21, 2016",tags:[{label:"c",permalink:"/archives/tags/c"}],readingTime:1.24,hasTruncateMarker:!1,authors:[],frontMatter:{title:"I don't know c language",tags:["c"],categories:["computer science"],date:"2016-04-21T21:12:00.000Z"},prevItem:{title:"My favorite script",permalink:"/archives/My-favorite-script"},nextItem:{title:"alignment and round number using & and ~",permalink:"/archives/alignment-and-round-number-using-and"}},p={authorsImageUrls:[]},c=[{value:"allocate string by array or pointer",id:"allocate-string-by-array-or-pointer",level:2},{value:"Answer",id:"answer",level:2},{value:"function argument array or pointer",id:"function-argument-array-or-pointer",level:2},{value:"sizeof is an operator",id:"sizeof-is-an-operator",level:2},{value:"array",id:"array",level:3},{value:"type",id:"type",level:3}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"allocate-string-by-array-or-pointer"},"allocate string by array or pointer"),(0,a.kt)("p",null,"What's difference between them?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#include<stdio.h>\n\nint main()\n{\n    char a[] = "apple";\n    char *b = "apple";\n}\n')),(0,a.kt)("h2",{id:"answer"},"Answer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    char a[] = "apple";\n')),(0,a.kt)("p",null,"When string is allocated by array, all the characters are saved in the stack."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    char *b = "apple";\n')),(0,a.kt)("p",null,"When string is allocated by pointer, only pointer is saved in the stack, and it points to the string, which is saved in the read-only section."),(0,a.kt)("h2",{id:"function-argument-array-or-pointer"},"function argument array or pointer"),(0,a.kt)("p",null,"What's difference between them?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#include<stdio.h>\n\nvoid func1(char * s)\n{\n    printf("%s",s);\n}\nvoid func2(char s[])\n{\n    printf("%s",s);\n}\nint main()\n{\n    func1("apple");\n    func2("apple");\n    return 0;\n}\n')),(0,a.kt)("p",null,'In book "The c programming language 2nd"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"As formal parameters in a function definition,\n    char s[];\nand\n    char *s;\nare equivalent; we prefer the latter because it says more explicitly that the\nparameter is a pointer\n")),(0,a.kt)("p",null,"But in which situation, we prefer to use array argument?\nIn one mail to linux kernel mentioned that"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://lkml.org/lkml/2015/9/3/499"},"https://lkml.org/lkml/2015/9/3/499")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"The \"array as function argument\" syntax is occasionally useful\n(particularly for the multi-dimensional array case), so I very much\nunderstand why it exists, I just think that in the kernel we'd be\nbetter off with the rule that it's against our coding practices.\n")),(0,a.kt)("h2",{id:"sizeof-is-an-operator"},"sizeof is an operator"),(0,a.kt)("p",null,"sizeof value is determined in compile time."),(0,a.kt)("p",null,"sizeof is only correctly used in two places."),(0,a.kt)("h3",{id:"array"},"array"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'char s[10];\nprintf("%zu",sizeof(s));\n// 10\n')),(0,a.kt)("h3",{id:"type"},"type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'char* s="hello";\nprintf("%zu",sizeof(s));\nprintf("%zu",sizeof(char *));\n/*\n8\n8\n*/\n// sizeof(variable) == sizeof(variable type)\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Sizeof"},"https://en.wikipedia.org/wiki/Sizeof")))}u.isMDXComponent=!0}}]);