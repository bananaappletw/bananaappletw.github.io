"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/how-to-interview-security-engineer","metadata":{"permalink":"/blog/how-to-interview-security-engineer","editUrl":"https://github.com/bananaappletw/blog/edit/master/blog/how-to-interview-security-engineer.md","source":"@site/blog/how-to-interview-security-engineer.md","title":"How to interview security engineer","description":"OWASP TOP 10","date":"2021-09-04T00:00:00.000Z","formattedDate":"September 4, 2021","tags":[{"label":"security","permalink":"/blog/tags/security"}],"readingTime":0.035,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"How to interview security engineer","tags":["security"],"date":"2021-09-04T00:00:00.000Z"},"nextItem":{"title":"OpSec","permalink":"/blog/opsec"}},"content":"## OWASP TOP 10\\n\\n[OWASP TOP 10](https://owasp.org/www-project-top-ten/)"},{"id":"/opsec","metadata":{"permalink":"/blog/opsec","editUrl":"https://github.com/bananaappletw/blog/edit/master/blog/opsec.md","source":"@site/blog/opsec.md","title":"OpSec","description":"Two-Factor Authentication (2FA)","date":"2021-07-27T00:00:00.000Z","formattedDate":"July 27, 2021","tags":[{"label":"security","permalink":"/blog/tags/security"}],"readingTime":0.595,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"OpSec","tags":["security"],"date":"2021-07-27T00:00:00.000Z"},"prevItem":{"title":"How to interview security engineer","permalink":"/blog/how-to-interview-security-engineer"},"nextItem":{"title":"GCP resource hierarchy","permalink":"/blog/gcp-resource-hierarchy"}},"content":"## Two-Factor Authentication (2FA)\\n\\nEnable Two-Factor Authentication on every service, and keep your device with you.\\n\\n## FileVault\\n\\nEnable FileVault to encrypt disk\\n\\n[Ref](https://support.apple.com/en-us/HT204837)\\n\\n:::warning\\n\\nLock Your Desktop When You\'re Away.\\n\\n:::\\n\\n## Seperate browsers for different purposes\\n\\nFor example, I usually used two browsers(Chrome Stable and Chrome Canary). Chrome Stable for my personal use, I will install any Chrome plugin I want on this browser. Chrome Canary for company use, without any Chrome plugin installed.\\n\\n[run-multiple-versions-of-chrome-side-by.html](https://blog.chromium.org/2017/08/run-multiple-versions-of-chrome-side-by.html)\\n\\n## Email\\n\\nRegister SPF for your domain to detect forging sender addresses\\n\\n[SPF](https://en.wikipedia.org/wiki/Sender_Policy_Framework)\\n\\n## Privacy\\n\\nWhenever we are using the software, some of them will collect your data. For example, search history.\\n\\n[Privacy tool](https://www.privacytools.io/)\\n\\n## Periodically check your data not leaked\\n\\n[https://haveibeenpwned.com/](https://haveibeenpwned.com/)"},{"id":"/gcp-resource-hierarchy","metadata":{"permalink":"/blog/gcp-resource-hierarchy","editUrl":"https://github.com/bananaappletw/blog/edit/master/blog/gcp-resource-hierarchy.md","source":"@site/blog/gcp-resource-hierarchy.md","title":"GCP resource hierarchy","description":"Overview","date":"2021-07-23T00:00:00.000Z","formattedDate":"July 23, 2021","tags":[{"label":"gcp","permalink":"/blog/tags/gcp"}],"readingTime":1.66,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"GCP resource hierarchy","tags":["gcp"],"date":"2021-07-23T00:00:00.000Z"},"prevItem":{"title":"OpSec","permalink":"/blog/opsec"},"nextItem":{"title":"KVM GPU passthrough Ubuntu 20.04","permalink":"/blog/kvm-gpu-passthrough-ubuntu-20-04"}},"content":"## Overview\\n\\nScenario:\\n\\n- A company size of `200` people seperated into `10` teams.\\n- Administer can have the company-wide policy to limit GCP account.\\n- Easy way to switch user to the other team.\\n- Single login page for user to login\\n- Each team wants its own access to its resources.\\n- Also, different environment for specific purpose.\\n- Sometimes, they need temporarily cooperation between teams.\\n- For auditing, bills should be seperated by each team.\\n\\nSolution:\\n\\n- [Google Group](https://support.google.com/groups) to grouping user by team or functionality.\\n- [Nesting](https://support.google.com/a/answer/167100) group to organize members within the team.\\n- [GCP folder](https://cloud.google.com/resource-manager/docs/creating-managing-folders) to have hiearchy architecture.\\n- Set [IAM](https://cloud.google.com/resource-manager/docs/access-control-folders) role by Google Group email\\n- Set [Organization Policy](https://cloud.google.com/resource-manager/docs/organization-policy/overview) on GCP folder limit resource.\\n- Using seperated GCP folder for different enviroment, producion, staging...... .\\n\\nimport Mermaid from \'@theme/Mermaid\';\\n\\n## Organization\\n\\n<Mermaid chart={`\\n\\tgraph LR\\n\\t\\tR[Organization root] --\x3e A[Team A folder]\\n\\t\\tR[Organization root] --\x3e B[Team B folder]\\n\\t\\tA[Company folder] --\x3e A1[Team A production folder]\\n\\t\\tA[Company folder] --\x3e A2[Team A staging folder]\\n\\t\\tB[Company folder] --\x3e B1[Team B production folder]\\n\\t\\tB[Company folder] --\x3e B2[Team B staging folder]\\n\\t\\tR[Organization root] --\x3e P[playground folder]\\n`}/>\\n\\n\\n## Nested Google Group\\n\\n<Mermaid chart={`\\ngraph LR\\n    subgraph A [Team A Google Group]\\n    A1[Team A production Google Group]\\n    A2[Team A staging Google Group]\\n    end\\n`}/>\\n\\n## IAM relationship between Google Group and Google project\\n\\n<Mermaid chart={`\\n\\tgraph LR\\n\\t\\tA[Team A Google Group] -- Folder Admin/Owner --\x3eAF[Team A folder]\\n\\t\\tA1[Team A production Google Group] -- Folder Admin/Owner --\x3eA1F[Team A production folder]\\n\\t\\tA2[Team A production Google Group] -- Folder Admin/Owner --\x3eA2F[Team A staging folder]\\n\\t\\tP[playground Google Group] -- Folder Admin/Owner --\x3ePF[Team B playground folder]\\n`}/>\\n\\n## Terraform\\n\\n- [Seed project](https://femrtnz.medium.com/automating-gcp-projects-with-terraform-d571f0d94742) (Not Recommanded)\\n\\nCreate service account per GCP project as Terraform repo\'s credential.\\n\\n- [one-to-one mapping between Terraform repo and GCP project](https://registry.terraform.io/providers/hashicorp/google/latest/docs)\\n\\n<Mermaid chart={`\\n\\tgraph LR;\\n\\t\\tA[A GCP project] --\x3e AT[A Terraform repo];\\n\\t\\tAT[A Terraform repo] --\x3e A[A GCP project];\\n\\t\\tB[B GCP project] --\x3e BT[B Terraform repo];\\n\\t\\tBT[B Terraform repo] --\x3e B[B GCP project];\\n`}/>"},{"id":"/kvm-gpu-passthrough-ubuntu-20-04","metadata":{"permalink":"/blog/kvm-gpu-passthrough-ubuntu-20-04","editUrl":"https://github.com/bananaappletw/blog/edit/master/blog/kvm-gpu-passthrough-ubuntu-20-04.md","source":"@site/blog/kvm-gpu-passthrough-ubuntu-20-04.md","title":"KVM GPU passthrough Ubuntu 20.04","description":"Environment","date":"2021-07-05T00:00:00.000Z","formattedDate":"July 5, 2021","tags":[{"label":"kvm","permalink":"/blog/tags/kvm"},{"label":"cloud-init","permalink":"/blog/tags/cloud-init"},{"label":"vfio","permalink":"/blog/tags/vfio"},{"label":"GPU","permalink":"/blog/tags/gpu"}],"readingTime":3.13,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"KVM GPU passthrough Ubuntu 20.04","tags":["kvm","cloud-init","vfio","GPU"],"date":"2021-07-05T00:00:00.000Z"},"prevItem":{"title":"GCP resource hierarchy","permalink":"/blog/gcp-resource-hierarchy"},"nextItem":{"title":"AWS resource hierarchy","permalink":"/blog/aws-resource-hierarchy"}},"content":"## Environment\\n\\n- Host: Ubuntu 20.04\\n- Guest: Ubuntu 20.04\\n- GPU: NVIDIA\xae GeForce\xae RTX 2080 Ti\\n\\n## Enable IOMMU\\n\\n### Configure GRUB\\n\\nEdit `/etc/default/grub`\\n\\n```grub\\n# Intel CPU\\nGRUB_CMDLINE_LINUX_DEFAULT=\\"intel_iommu=on\\"\\n# AMD CPU\\nGRUB_CMDLINE_LINUX_DEFAULT=\\"amd_iommu=on iommu=pt kvm_amd.npt=1 kvm_amd.avic=1\\"\\n```\\n\\n### Update GRUB\\n\\n`sudo update-grub`\\n\\n### Reboot\\n\\n`sudo shutdown -r now`\\n\\n### Verify IOMMU is enabled\\n\\n`dmesg | grep IOMMU`\\n\\nOutput:\\n\\n```\\nIOMMU enabled\\n```\\n\\n## Enable IOMMU group\\n\\n### Check IOMMU group is enabled\\n\\n`for a in /sys/kernel/iommu_groups/*; do find $a -type l; done | sort --version-sort`\\n\\noutput:\\n\\n```\\n/sys/kernel/iommu_groups/0/devices/0000:00:00.0\\n/sys/kernel/iommu_groups/1/devices/0000:00:04.0\\n/sys/kernel/iommu_groups/2/devices/0000:00:04.1\\n/sys/kernel/iommu_groups/3/devices/0000:00:04.2\\n/sys/kernel/iommu_groups/4/devices/0000:00:04.3\\n```\\n\\n### Edit BIOS setting is not enabled\\n\\nIf output is not expected, configure BIOS setting\\n\\n#### VT-d\\n\\n(Asus)\\n- Advanced => System Agent Configuration => Intel VT for Directed I/O (VT-d)\\n\\n(Supermicro)\\n- Advanced => CPU Configuration => Intel Virtualization Technology => [enable]\\n- Advanced => Chipset Configuration => North Bridge => IIO Configuration => Intel VT fot Directed I/O (VT-d) => [enable]\\n\\n- [https://superuser.com/questions/1112238/intel-iommu-on-but-no-iommu-groups](https://superuser.com/questions/1112238/intel-iommu-on-but-no-iommu-groups)\\n\\n## Isolation of the guest GPU\\n\\nimport Mermaid from \'@theme/Mermaid\';\\n\\n<Mermaid chart={`\\ngraph LR\\n    subgraph C [guest]\\n    C1[PCI device]\\n    end\\n    subgraph B [hypervisor]\\n    B1[VFIO] --\x3e C1[PCI device]\\n    end\\n    subgraph A [Host]\\n    A1[PCI device] --\x3e B1[VFIO]\\n    end\\n`}/>\\n\\n## Using vfio-pci to manage PCI device\\n\\n### Find out vendor ID and device ID\\n\\n`lspci -nn | grep -i NVIDIA`\\n\\n```\\n01:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU102 [GeForce RTX 2080 Ti] [10de:1e04] (rev a1)\\n01:00.1 Audio device [0403]: NVIDIA Corporation TU102 High Definition Audio Controller [10de:10f7] (rev a1)\\n01:00.2 USB controller [0c03]: NVIDIA Corporation TU102 USB 3.1 Host Controller [10de:1ad6] (rev a1)\\n01:00.3 Serial bus controller [0c80]: NVIDIA Corporation TU102 USB Type-C UCSI Controller [10de:1ad7] (rev a1)\\n```\\n\\nGeForce RTX 2080 Ti VGA compatible controller:\\nPCI ID:`01:00.0`\\nvendor ID: `10de`\\ndevice ID: `1e04`\\n\\n### Configure GRUB\\n\\n`/etc/default/grub`\\n\\nApply all the related devices\\n\\n```\\nGRUB_CMDLINE_LINUX_DEFAULT=\\"intel_iommu=on vfio-pci.ids=10de:1e04,10de:10f7,10de:1ad6,10de:1ad7\\"\\n```\\n\\n### Update GRUB\\n\\n`sudo update-grub`\\n\\n### Reboot\\n\\n`sudo reboot`\\n\\n### Verify PCI device is managed by vfio-pci\\n\\n`lspci -nnv`\\n\\nFind the line `Kernel driver in use`\\n\\n```\\n0b:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU102 [GeForce RTX 2080 Ti] [10de:1e04] (rev a1) (prog-if 00 [VGA controller])\\n...\\nKernel driver in use: vfio-pci\\n```\\n\\n## Test GPU passthrough on kvm instance\\n\\n### Fresh install\\n\\nRun `virt-install` with `--host-device [device_id]` and `--features kvm_hidden=on` parameters\\n\\n```\\nvirt-install ... \\\\\\n--host-device 01:00.0 \\\\\\n--features kvm_hidden=on \\\\\\n```\\n\\n### Modify existing instance\\n\\n`virsh edit [domain]`\\n\\nAdd PCI mapping `hostdev` block\\n\\n`0000:01:00.0` within the host will be mapped to `0000:04:00.0` within guest\\n\\n:::warning\\n\\n`bus` number should less than virtio\'s\\n\\nIncrease virtio\'s bus number to spare small number for new added entry\\n\\n:::\\n\\n```\\n<devices>\\n  ...\\n    <hostdev mode=\'subsystem\' type=\'pci\' managed=\'yes\'>\\n      <source>\\n        <address domain=\'0x0000\' bus=\'0x01\' slot=\'0x00\'function=\'0x0\'/>\\n      </source>\\n      <address type=\'pci\' domain=\'0x0000\' bus=\'0x04\'slot=\'0x00\' function=\'0x0\'/>\\n    </hostdev>\\n    <memballoon model=\'virtio\'>\\n      <address type=\'pci\' domain=\'0x0000\' bus=\'0x05\'slot=\'0x00\' function=\'0x0\'/>\\n    </memballoon>\\n    <rng model=\'virtio\'>\\n      <backend model=\'random\'>/dev/urandom</backend>\\n      <address type=\'pci\' domain=\'0x0000\' bus=\'0x06\'slot=\'0x00\' function=\'0x0\'/>\\n    </rng>\\n</devices>\\n```\\n\\n`kvm hidden` within `features` block\\n\\n```\\n<features>\\n...\\n  <kvm>\\n    <hidden state=\'on\'/>\\n  </kvm>\\n</features>\\n```\\n\\n## Check GPU is working in guest\\n\\n`lspci`\\n\\n```\\n04:00.0 VGA compatible controller: NVIDIA Corporation TU102[GeForce RTX 2080 Ti] (rev a1)\\n```\\n\\nInstall NVIDIA driver\\n\\n```sh\\nsudo apt update\\nsudo apt install nvidia-driver-460\\nsudo reboot\\n```\\n\\n`nvidia-smi`\\n\\n```\\nWed Mar 10 08:19:43 2021\\n+---------------------------------------------------------------------------+\\n| NVIDIA-SMI 460.39       Driver Version: 460.39       CUDVersion: 11.2     |\\n|-------------------------------+--------------------+----------------------+\\n| GPU  Name        Persistence-M| Bus-Id        Disp.A Volatile Uncorr. ECC |\\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage GPU-Util  Compute M. |\\n|                               |                    |               MIG M. |\\n|===============================+====================+======================|\\n|   0  GeForce RTX 208...  Off  | 00000000:04:00.0 Of|                  N/A |\\n| 15%   44C    P0     1W / 250W |      0MiB / 11019Mi|      0%      Default |\\n|                               |                    |                  N/A |\\n+-------------------------------+--------------------+----------------------+\\n+---------------------------------------------------------------------------+\\nProcesses:                                                                |\\n|  GPU   GI   CI        PID   Type   Procesname                  GPU Memory |\\n|        ID ID                                                 Usage      |\\n===========================================================================|\\n|  No running processefound                                                 |\\n+---------------------------------------------------------------------------+\\n```\\n\\n## Reference\\n\\n- [https://mathiashueber.com/pci-passthrough-ubuntu-2004-virtual-machine/](https://mathiashueber.com/pci-passthrough-ubuntu-2004-virtual-machine/)"},{"id":"/aws-resource-hierarchy","metadata":{"permalink":"/blog/aws-resource-hierarchy","editUrl":"https://github.com/bananaappletw/blog/edit/master/blog/aws-resource-hierarchy.md","source":"@site/blog/aws-resource-hierarchy.md","title":"AWS resource hierarchy","description":"Overview","date":"2021-07-03T00:00:00.000Z","formattedDate":"July 3, 2021","tags":[{"label":"aws","permalink":"/blog/tags/aws"}],"readingTime":2.08,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"AWS resource hierarchy","tags":["aws"],"date":"2021-07-03T00:00:00.000Z"},"prevItem":{"title":"KVM GPU passthrough Ubuntu 20.04","permalink":"/blog/kvm-gpu-passthrough-ubuntu-20-04"}},"content":"## Overview\\n\\nScenario:\\n\\n- A company size of `200` people seperated into `10` teams.\\n- Administer can have the company-wide policy to limit AWS account.\\n- Easy way to switch user to the other team.\\n- Single login page for user to login\\n- Each team wants its own access to its resources.\\n- Also, different environment for specific purpose.\\n- Sometimes, they need temporarily cooperation between teams.\\n- For auditing, bills should be seperated by each team.\\n\\nSolution:\\n\\n- [AWS Organization](https://aws.amazon.com/tw/organizations/) to have hiearchy architecture.\\n- Move AWS Accounts into different [Organizational Unit](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html).\\n- Attach [Service Control Policies](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html) to OU to limit AWS accounts.\\n- Using seperated account for different enviroment, producion, staging...... .\\n\\nimport Mermaid from \'@theme/Mermaid\';\\n\\n## Organization\\n\\n<Mermaid chart={`\\n\\tgraph LR\\n\\t\\tR[Organization root] --\x3e C[Company OU]\\n\\t\\tC[Company OU] --\x3e A1[Team A production AWS account]\\n\\t\\tC[Company OU] --\x3e A2[Team A staging AWS account]\\n\\t\\tC[Company OU] --\x3e B1[Team B production AWS account]\\n\\t\\tC[Company OU] --\x3e B2[Team B staging AWS account]\\n\\t\\tR[Organization root] --\x3e P[playground AWS account]\\n`}/>\\n\\nCompany OU will whitelist AWS resource and region.\\nPlayground account has no limitation on AWS resource.\\nPeriodically clean resource of playground account.\\n\\n:::info\\n\\n[AWS Tag](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) is another solution to have more detail bill within AWS account.\\n\\n:::\\n\\n## Terraform\\n\\nCreate `terraform` IAM access key and attach AdministratorAccess policy as Terraform repo\'s credential.\\n\\n<Mermaid chart={`\\n\\tgraph LR;\\n\\t\\tA[A AWS account] --\x3e AT[A Terraform repo];\\n\\t\\tAT[A Terraform repo] --\x3e A[A AWS account];\\n\\t\\tB[B AWS account] --\x3e BT[B Terraform repo];\\n\\t\\tBT[B Terraform repo] --\x3e B[B AWS account];\\n`}/>\\n\\n## SSO\\n\\n:::caution\\n\\nRecommended using SSO to manage AWS Accounts, otherwise you will have to manage your account from different place.\\n\\n:::\\n\\n### Google apps SSO\\n\\n:::warning\\n\\nYou have to have GSuite super administrator access.\\n\\n:::\\n\\nFollow the [How to Set Up Federated Single Sign-On to AWS Using Google Apps](https://aws.amazon.com/blogs/security/how-to-set-up-federated-single-sign-on-to-aws-using-google-apps/) instruction\\n\\nThen, you will find out it\'s one-to-one mapping between Google account and IAM role.\\n\\nWe want mapping of Google group and IAM role.\\n\\nRefer repo [https://github.com/1Strategy/sso-to-aws-using-gsuite](https://github.com/1Strategy/sso-to-aws-using-gsuite)\\n\\nBy using GSuite Admin API\\n\\nIterate the Google group, for each Google account, map to corresponding IAM role\\n\\n### AWS SSO\\n\\n[https://aws.amazon.com/tw/single-sign-on/](https://aws.amazon.com/tw/single-sign-on/)\\n\\n<Mermaid chart={`\\n\\tgraph LR;\\n\\t\\tA[A AWS account admin group] --\x3e AA[Administer role of A account];\\n\\t\\tA[A AWS account readonly group] --\x3e AR[readonly role of account];\\n\\t\\tB[B AWS account admin group] --\x3e BA[Administer role of A account];\\n\\t\\tB[B AWS account readonly group] --\x3e BR[readonly role of account];\\n`}/>\\n\\nAssign user to group to have access to account.\\n\\n[Neat short-term credentials for command line interface](https://aws.amazon.com/blogs/security/aws-single-sign-on-now-enables-command-line-interface-access-for-aws-accounts-using-corporate-credentials/)"}]}')}}]);