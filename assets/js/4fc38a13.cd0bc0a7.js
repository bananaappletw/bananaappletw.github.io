"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(c,".").concat(d)]||b[d]||s[d]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},15694:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Rubocop - Ruby static code analyzer",author:"bananaapple",tags:["ruby on rails","rubocop","ruby code formatter"],categories:["computer science"],date:new Date("2017-02-04T13:44:00.000Z")},l=void 0,i={permalink:"/archives/Rubocop-Ruby-static-code-analyzer",editUrl:"https://github.com/banananappletw/blog/edit/master/blog/archives/archives/Rubocop-Ruby-static-code-analyzer.md",source:"@site/archives/Rubocop-Ruby-static-code-analyzer.md",title:"Rubocop - Ruby static code analyzer",description:"Rubocop \u662f\u4e00\u500b Ruby static code analyzer",date:"2017-02-04T13:44:00.000Z",formattedDate:"February 4, 2017",tags:[{label:"ruby on rails",permalink:"/archives/tags/ruby-on-rails"},{label:"rubocop",permalink:"/archives/tags/rubocop"},{label:"ruby code formatter",permalink:"/archives/tags/ruby-code-formatter"}],readingTime:1.72,hasTruncateMarker:!1,authors:[{name:"bananaapple"}],frontMatter:{title:"Rubocop - Ruby static code analyzer",author:"bananaapple",tags:["ruby on rails","rubocop","ruby code formatter"],categories:["computer science"],date:"2017-02-04T13:44:00.000Z"},prevItem:{title:"Rails best practices",permalink:"/archives/Rails-Best-practice"},nextItem:{title:"Concurrency vs parallelism",permalink:"/archives/concurrency-vs-parallelism"}},c={authorsImageUrls:[void 0]},p=[],u={toc:p};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Rubocop \u662f\u4e00\u500b Ruby static code analyzer\n\u4e3b\u8981\u7528\u4f86 format coding style"),(0,a.kt)("h1",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Add following line to Gemfile.rb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"gem 'rubocop', require: false\n")),(0,a.kt)("h1",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Config \u53ef\u4ee5\u53c3\u8003 github \u4e0a\u7684 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bbatsov/rubocop/tree/master/config"},"Config")," \u8cc7\u6599\u593e"),(0,a.kt)("p",null,"\u88e1\u9762\u6709\u4e09\u500b\u6a94\u6848"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"default.yml(\u4e3b\u8981\u7684)"),(0,a.kt)("li",{parentName:"ul"},"enabled.yml(\u9810\u8a2d\u958b\u555f\u7684)"),(0,a.kt)("li",{parentName:"ul"},"disabled.yml(\u9810\u8a2d\u95dc\u6389\u7684)")),(0,a.kt)("p",null,"\u6539\u597d\u5f8c\u547d\u540d\u70ba ",(0,a.kt)("inlineCode",{parentName:"p"},".rubocop.yml")," \u653e\u5728 repo \u88e1\uff0c\u7576\u4f60\u57f7\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"rubocop")," \u6307\u4ee4\u7684\u6642\u5019\u5c31\u6703\u8b80\u53d6\u9019\u500b\u6a94\u6848\u7684\u8a2d\u5b9a\u958b\u59cb\u6aa2\u67e5\u8a9e\u6cd5"),(0,a.kt)("p",null,"\u4ee5\u4e0b\u662f\u6211\u81ea\u5df1\u7528\u7684 Rules"),(0,a.kt)("p",null,"\u628a\u4e00\u4e9b\u6bd4\u8f03\u9ebb\u7169\u7684 rules disable \u6389\u4e86"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"AllCops:\n  Exclude:\n    - 'db/migrate/*'\n    - 'vendor/**/*'\nRails:\n  Enabled: true\n\nRails/HasAndBelongsToMany:\n  Enabled: false\n\nBundler/OrderedGems:\n  Enabled: false\n\nStyle/ClassAndModuleChildren:\n  Enabled: false\n\nStyle/ConditionalAssignment:\n  Enabled: false\n\nStyle/Documentation:\n  Enabled: false\n\nStyle/FrozenStringLiteralComment:\n  Enabled: false\n\nStyle/Next:\n  Enabled: false\n\nStyle/GuardClause:\n    Enabled: false\n\nMetrics/LineLength:\n  Enabled: false\n\nMetrics/BlockLength:\n  Enabled: false\n\nMetrics/MethodLength:\n  Enabled: false\n\nMetrics/AbcSize:\n    Enabled: false\n")),(0,a.kt)("p",null,"rubocop \u53ef\u4ee5\u5e6b\u4f60\u81ea\u52d5\u4fee\u6b63\u4e00\u4e9b\u8a9e\u6cd5\uff0c\u53ea\u8981\u52a0\u4e0a ",(0,a.kt)("inlineCode",{parentName:"p"},"--auto-correct")," \u53c3\u6578"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"rubocop --auto-correct\n")),(0,a.kt)("p",null,"\u4f46\u662f\u6709\u6642\u5019\u60f3\u8981\u4e00\u6b65\u4e00\u6b65\u4fee\u8a9e\u6cd5\uff0c\u6211\u53ea\u60f3\u4fee\u6b63\u6709\u95dc ",(0,a.kt)("inlineCode",{parentName:"p"},"Style")," \u7684\u8a9e\u6cd5\uff0c\u5c31\u8981\u52a0\u4e0a ",(0,a.kt)("inlineCode",{parentName:"p"},"--only")," \u53c3\u6578\uff0c\u5176\u4ed6\u4ee5\u6b64\u985e\u63a8"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"rubocop --auto-correct --only Style\nrubocop --auto-correct --only HashSyntax\nrubocop --auto-correct --only StringLiterals\n")),(0,a.kt)("h1",{id:"rake-task"},"Rake task"),(0,a.kt)("p",null,"\u5982\u679c\u8981\u6574\u5408 travis ci \u5728\u6bcf\u6b21 code push \u7684\u6642\u5019\u6aa2\u67e5\u8a9e\u6cd5\u7684\u8a71\uff0c\u5c31\u8981\u628a rubocop \u5beb\u6210 rake task\uff0c\u7136\u5f8c\u5beb\u6210 ",(0,a.kt)("inlineCode",{parentName:"p"},"rake")," default \u6703\u8dd1\u7684 task"),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/tasks/rubocop.rake")," \u52a0\u4e0a\u9019\u5e7e\u884c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"begin\n  require 'rubocop/rake_task'\n\n  RuboCop::RakeTask.new\n\nrescue LoadError # rubocop:disable Lint/HandleExceptions\nend\n")),(0,a.kt)("p",null,"\u7136\u5f8c\u4fee\u6539\u4e00\u4e0b ",(0,a.kt)("inlineCode",{parentName:"p"},"Rakefile")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"require_relative 'config/application'\n\nRails.application.load_tasks\ntask default: [:rubocop]\n")),(0,a.kt)("p",null,"\u9019\u6a23\u7576\u4f60\u6253 ",(0,a.kt)("inlineCode",{parentName:"p"},"rake")," \u7684\u6642\u5019\u5c31\u6703\u81ea\u52d5\u5e6b\u4f60\u6aa2\u67e5\u8a9e\u6cd5\u4e86"),(0,a.kt)("p",null,"\u8981\u662f\u6709\u4e0d\u61c2\u7684\u540d\u8a5e\u53ef\u4ee5\u67e5 ",(0,a.kt)("a",{parentName:"p",href:"http://www.rubydoc.info/github/bbatsov/rubocop/Rubocop/"},"Official document")))}s.isMDXComponent=!0}}]);